if (isJar.toBoolean()) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

apply plugin: 'kotlin-android'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        if (!isJar.toBoolean()) {
            applicationId "com.yaxiu.devices"
        }

        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // cppFlags ''
                arguments "-DANDROID_ARM_NEON=TRUE"
                abiFilters "armeabi-v7a"
            }
        }
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (isJar.toBoolean()) {
               manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'debug/**'
                }
            }
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

task makeJar(type: Copy) {
    delete 'build/libs/video.jar' //删除已经存在的jar
    //3.0 以前
    //module -> 'build/intermediates/bundles/default'
    //3.0以后
    //module -> 'build/intermediates/packaged-classes/release'
    //4.0
    //module -> 'build/intermediates/aar_main_jar/release'
    from('build/intermediates/aar_main_jar/release')//生成jar的位置（不同版本对应不同位置，请参照上一步）
    into('build/libs/')//生成的jar 复制到build/libs 下
    include('classes.jar')	//这是要复制的文件，前面讲到所有生成的jar都叫classes
    rename('classes.jar','video.jar')	//这是将classes改成你想要的名字

}

makeJar.dependsOn(build)
//然后在【Terminal】中输入
//gradlew makeJar

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    api 'com.iqiyi.xcrash:xcrash-android-lib:3.0.0'
}